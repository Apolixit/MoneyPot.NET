@inject IToastService toastService;
@inject IAccountService accountService;
@inject ILogger<Program> logger;

<div class="relative grow p-6 bg-white rounded-lg border border-@global.themeInfo.MainColor m-10">
    <div class="flex justify-between items-center mb-4">
        <div class="text-base font-bold leading-none text-gray-900">
            Money pot <span class="ml-2 text-xs hidden">(@MoneyPotItem.Hash)</span>
            @if (MoneyPotItem.AmountTarget.HasValue)
            {
                <div class="font-light text-sm mt-2"><i class="fa-solid fa-bullseye mr-2"></i> @MoneyPotItem.AmountTarget.Value.ToString("N0") <i class="fa-solid fa-sack-dollar fa-sm ml-1"></i></div>
            }
        </div>

        @if (!MoneyPotItem.IsFinished)
        {
            <span class="bg-green-100 text-green-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded dark:bg-green-200 dark:text-green-900">Open</span>
        }
        else
        {
            <span class="bg-indigo-100 text-indigo-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded dark:bg-indigo-200 dark:text-indigo-900">Close</span>
        }
    </div>
    <div class="my-4">
        @if (MoneyPotItem.TypeEnd == TypeEndDto.AmountLimit)
        {
            <AmountTarget Current="MoneyPotItem.SumContribution()" Target="MoneyPotItem.AmountTarget" />
        }
        else
        {
            <ScheduleTarget BlockTarget="MoneyPotItem.BlockTarget" />
        }
    </div>
    <div class="mb-2 font-semibold">
        <p>Creator :</p>
        <MPPopover>
            <TogglePopoverContent>
                <span class="bg-blue-100 text-blue-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded">
                    @MoneyPotItem.Creator.Name
                </span>
            </TogglePopoverContent>
            <PopoverContent>
                <AccountCard Account="@MoneyPotItem.Creator" />
            </PopoverContent>
        </MPPopover>
    </div>
    <div class="mb-2 font-semibold">
        <p>Receiver :</p>

        <MPPopover>
            <TogglePopoverContent>
                <span class="bg-blue-100 text-blue-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded">
                    @MoneyPotItem.Receiver.Name
                </span>
            </TogglePopoverContent>
            <PopoverContent>
                <AccountCard Account="@MoneyPotItem.Receiver" />
            </PopoverContent>
        </MPPopover>
    </div>
    <div class="mb-3 font-semibold">
        <p>Contributors :</p>

        <MPList Elems="@MoneyPotItem.Contributors"
                Context="contributor">
            <ElemsContent>
                <MPPopover>
                    <TogglePopoverContent>
                        <span class="bg-blue-100 text-blue-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded">
                            @contributor.Contributor.Name - @contributor.Amount.ToString("N0") <i class="fa-solid fa-sack-dollar fa-xs ml-1"></i>
                        </span>
                    </TogglePopoverContent>
                    <PopoverContent>
                        <AccountCard Account="@contributor.Contributor" />
                    </PopoverContent>
                </MPPopover>
            </ElemsContent>
        </MPList>
    </div>
    @if (!MoneyPotItem.IsFinished)
    {
        <div class="flex justify-between items-end">
            <Modal Valid=""
               Cancel="Close"
               @ref="_contributionModal">
                <ToggleModalContent>Contribute !</ToggleModalContent>
                <ModalContent>
                    <ContributeForm MoneyPot="MoneyPotItem"
                                OnMoneyPotContribution="OnMoneyPotContribution" />
                </ModalContent>
            </Modal>
        </div>
    }
</div>

@code {
    [CascadingParameter] protected MainLayout.GlobalInformation? global { get; set; }
    [Parameter] public MoneyPotDto MoneyPotItem { get; set; }
    private Modal _contributionModal { get; set; } = new();
    public ContributorDto? CurrentContributor { get; set; }

    protected override void OnInitialized()
    {
        if (MoneyPotItem == null)
            throw new ArgumentNullException("Please provide a money pot as parameter");
    }

    protected void OnMoneyPotContribution(ContributorDto CurrentContributor)
    {
        logger.LogInformation($"Contribution of {CurrentContributor.Contributor.Name} from {CurrentContributor.Amount} ok !");
        _contributionModal.Hide();
    }
}