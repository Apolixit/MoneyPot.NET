@using static MoneyPot_BlazorFront.Repository.IMoneyPotRepository
@inject IMoneyPotRepository moneyPotRepository;
@inject ILogger<Program> logger;
@inject IToastService toastService;

<h3 class="mb-4 text-xl font-medium">Contribute to money pot</h3>
<EditForm Model="_contributorModel"
          OnValidSubmit="ValidateContribution"
          class="space-y-6">
    <div>
        <InputNumber class=" bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                     @bind-Value="@_contributorModel.Amount" />
    </div>

    <MPButton TypeBtn="MPButton.TypeButton.Submit">
        Validate contribution
    </MPButton>
</EditForm>

@code {
    [Parameter] public MoneyPotDto MoneyPot { get; set; }
    [Parameter] public EventCallback<ContributorDto> OnMoneyPotContribution { get; set; }
    private ContributorDto _contributorModel { get; set; } = new();

    protected override void OnInitialized()
    {
        if (MoneyPot == null) 
            throw new ArgumentNullException("Please provide a money pot as parameter");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _contributorModel = new();
    }

    protected async Task ValidateContribution()
    {
        await moneyPotRepository.ContributeMoneyPotAsync(MoneyPot, _contributorModel.Amount, async (ExtrinsicStatusDto status) => {
            //Todo : gérer les comptes inconnus

            logger.LogInformation($"Money pot contribution = {status}");

            switch(status) {
                case ExtrinsicStatusDto.Waiting:
                    toastService.ShowInfo("Please wait...");
                    break;
                case ExtrinsicStatusDto.InBlock:
                    toastService.ShowSuccess("Your contribution has been successfully added !");
                    break;
                    case ExtrinsicStatusDto.Error:
                        toastService.ShowError("An error occured");
                        break;
                }

            await OnMoneyPotContribution.InvokeAsync(_contributorModel);
        });
    }
}
