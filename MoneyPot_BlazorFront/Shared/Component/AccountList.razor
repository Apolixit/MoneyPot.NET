@inject IAccountRepository accountRepository;

<div>
    <div class="mb-4 flex items-center justify-between">
        <div class="items-left">
            <MPTitle Title="Accounts" />
        </div>
        <div class="items-right">
            @if(global.connectedUser != null)
            {
                <span class="text-sm">You are connected as @global.connectedUser.Name</span>
            }
        </div>
    </div>

    <MPToast Level="MPToast.ToastLevel.Info" 
    @ref="connectedAccountToast">
        @if(global.connectedUser != null) {
            <text>You are now connected as @global.connectedUser.Name</text>
        }
    </MPToast>

    <div class="flex flex-col mt-8">
        <div class="overflow-x-auto">
            <MPTable Elems="Accounts" 
            Context="account">
                <TbodyContent>
                    <tr class="@(account.Address == global.connectedUser.Address ? "bg-green-100" : string.Empty)" 
                        @onclick="@(() => {
                            global.connectedUser = account;
                            connectedAccountToast.Show(); 
                            StateHasChanged();
                        })">
                        <td>
                            <img class="h-10 w-10 rounded-full" src="@account.AvatarUrl" alt="@account.Name">
                        </td>
                        <td class="text-sm font-normal">
                            <text>@account.Name</text>
                        </td>
                        <td class="text-xs font-normal text-gray-500">
                            @account.Address
                        </td>
                        <td>
                            @account.Balance.ToString("N0")
                        </td>
                    </tr>
                </TbodyContent>
            </MPTable>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] protected MainLayout.GlobalInformation? global { get; set; }
    protected List<AccountDto> Accounts { get; set; } = new List<AccountDto>();

    protected MPToast? connectedAccountToast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Accounts = await accountRepository.GetAll();

        if (global.connectedUser == null)
        {
            global.connectedUser = this.Accounts.First();
        }
    }
}
