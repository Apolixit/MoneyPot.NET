@using Blazored.Toast.Configuration
@using MoneyPot_BlazorFront.Helpers
@inject ISubstrateService substrateService;
@inject IToastService toastService;
@inject ILogger<Program> logger;
@inherits LayoutComponentBase

<nav class="bg-@global.themeInfo.BackgroundPrimaryColor border-b border-gray-200 z-30 w-full border-b-@global.themeInfo.MainColor">
    <div class="px-3 py-3 lg:px-5 lg:pl-3">
        <NavMenu />
    </div>
</nav>

<div class="flex overflow-hidden bg-@global.themeInfo.BackgroundPrimaryColor">
    <div class="w-full h-full bg-@global.themeInfo.BackgroundSecondaryColor relative">
        <CascadingValue Value="@global">
            <BlazoredToasts ShowProgressBar="true"
                            MaxToastCount="10"
                            IconType="IconType.FontAwesome"
                            InfoIcon="fa-solid fa-info"
                            SuccessIcon="fa-solid fa-thumbs-up"
                            WarningIcon="fa-solid fa-triangle-exclamation"
                            ErrorIcon="fa-solid fa-bug" />

            <main class="pt-6 px-4">
                @if (!substrateService.IsConnected)
                {
                    <div class="flex flex-col justify-center items-center loading-screen">
                        <Loader />
                        <div class="mt-2">Waiting blockchain connexion...</div>
                        <div class="p-4 mb-4 text-sm text-yellow-700 bg-yellow-100 rounded-lg @(displayAlert ? "block" : "hidden")" role="alert">
                            <span class="font-medium">
                                <i class="fa-solid fa-heart-crack"></i>
                                Unable to connect to Substrate node
                            </span> 
                        </div>
                    </div>
                }
                else
                {
                    <div class="w-full grid grid-cols-2 md::grid-cols-2 sm::grid-cols-1 gap-4 h-96 overflow-auto">
                        <div class="bg-@global.themeInfo.BackgroundPrimaryColor shadow rounded-lg p-4">
                            <BlockList />
                        </div>
                        <div class="bg-@global.themeInfo.BackgroundPrimaryColor shadow rounded-lg p-4 hidden">
                            <EventList />
                        </div>
                        <div class="bg-@global.themeInfo.BackgroundPrimaryColor shadow rounded-lg p-4 h-96">
                            <AccountList />
                        </div>
                    </div>
                    <div class="my-4">
                        @Body
                    </div>
                }
            </main>
        </CascadingValue>
    </div>
</div>


<Footer />

@code {
    protected GlobalInformation? global { get; set; }
    protected Theme.Mode currentMode { get; set; } = Theme.Mode.White;
    protected bool isCurrentlyConnected = false;

    protected bool displayAlert = false;
    protected override async Task OnInitializedAsync()
    {
        this.global = new GlobalInformation(this.currentMode);

        await substrateService.CheckBlockchainStateAsync(async (bool isConnected) =>
        {
            // If connexion state changed => refresh
            if (isCurrentlyConnected != isConnected)
            {
                logger.LogInformation($"Is connected : {isConnected}");
                isCurrentlyConnected = isConnected;

                if (!isConnected) displayAlert = true;

                StateHasChanged();
            }

        }, CancellationToken.None);
    }

    public class GlobalInformation
    {
        public IThemeInfo themeInfo;

        public GlobalInformation(Theme.Mode mode)
        {
            themeInfo = Theme.GetTheme(mode);
        }
    }
}